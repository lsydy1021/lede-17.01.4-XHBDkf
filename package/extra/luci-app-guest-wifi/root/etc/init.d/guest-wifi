#!/bin/sh /etc/rc.common
. /lib/functions/network.sh

START=50

interface_name="guest"

enabled=$(uci -q get guest-wifi.@guest-wifi[0].enable)
[ -z "$enabled" ] && enabled=0
wifi_name=$(uci -q get guest-wifi.@guest-wifi[0].wifi_name)
[ -z "$wifi_name" ] && wifi_name="Guest-WiFi"
encryption=$(uci -q get guest-wifi.@guest-wifi[0].encryption)
[ -z "$encryption" ] && encryption="psk2"
passwd=$(uci -q get guest-wifi.@guest-wifi[0].passwd)
[ -z "$passwd" ] && passwd="guestnetwork"
interface_ip=$(uci -q get guest-wifi.@guest-wifi[0].interface_ip)
[ -z "$interface_ip" ] && interface_ip="192.168.4.1"
isolate=$(uci -q get guest-wifi.@guest-wifi[0].isolate)
[ -z "$isolate" ] && isolate=1
start=$(uci -q get guest-wifi.@guest-wifi[0].start)
[ -z "$start" ] && start=50
limit=$(uci -q get guest-wifi.@guest-wifi[0].limit)
[ -z "$limit" ] && limit=200
leasetime=$(uci -q get guest-wifi.@guest-wifi[0].leasetime)
[ -z "$leasetime" ] && leasetime="1h"
device=$(uci -q get guest-wifi.@guest-wifi[0].device)
[ -z "$device" ] && device="radio0"
create=$(uci -q get guest-wifi.@guest-wifi[0].create)
[ -z "$create" ] && create=0

del_guest_wifi_cfg() {
	uci -q batch <<-EOF >/dev/null
		delete network.${interface_name}
		commit network
		delete wireless.${interface_name}
		commit wireless
		delete dhcp.${interface_name}
		commit dhcp
		delete firewall.${interface_name}_zone
		delete firewall.${interface_name}_fwd
		delete firewall.${interface_name}_dns_rule
		delete firewall.${interface_name}_dhcp_rule
		delete firewall.${interface_name}_hide_rule
		commit firewall
		set guest-wifi.@guest-wifi[0].create='0'
		commit guest-wifi
	EOF
}

add_interface() {
	uci -q batch <<-EOF >/dev/null
		set network.${interface_name}=interface
		set network.${interface_name}.proto='static'
		set network.${interface_name}.ipaddr="$interface_ip"
		set network.${interface_name}.netmask='255.255.255.0'
		commit network
	EOF
}

add_ssid() {
	local encryption_setting=''
	[ "$encryption" != "none" ] &&
		encryption_setting="set wireless.${interface_name}.key=\"$passwd\""

	uci -q batch <<-EOF >/dev/null
		set wireless.${interface_name}=wifi-iface
		set wireless.${interface_name}.device="$device"
		set wireless.${interface_name}.mode='ap'
		set wireless.${interface_name}.network="${interface_name}"
		set wireless.${interface_name}.ssid="$wifi_name"
		set wireless.${interface_name}.encryption="$encryption"
		set wireless.${interface_name}.isolate="$isolate"
		$encryption_setting
		commit wireless
	EOF
}

mod_dhcp() {
	uci -q batch <<-EOF >/dev/null
		set dhcp.${interface_name}=dhcp
		set dhcp.${interface_name}.interface="${interface_name}"
		set dhcp.${interface_name}.start="$start"
		set dhcp.${interface_name}.limit="$limit"
		set dhcp.${interface_name}.leasetime="$leasetime"
		commit dhcp
	EOF
}

mod_fw() {
	local lan_subnet
	network_flush_cache
	network_get_subnets lan_subnet 'lan'

	uci -q batch <<-EOF >/dev/null
		set firewall.${interface_name}_zone=zone
		set firewall.${interface_name}_zone.name="${interface_name}"
		set firewall.${interface_name}_zone.network="${interface_name}"
		set firewall.${interface_name}_zone.forward='REJECT'
		set firewall.${interface_name}_zone.output='ACCEPT'
		set firewall.${interface_name}_zone.input='REJECT'

		set firewall.${interface_name}_fwd=forwarding
		set firewall.${interface_name}_fwd.src="${interface_name}"
		set firewall.${interface_name}_fwd.dest='wan'

		set firewall.${interface_name}_dns_rule=rule
		set firewall.${interface_name}_dns_rule.name="Allow DNS Queries for $wifi_name"
		set firewall.${interface_name}_dns_rule.src="${interface_name}"
		set firewall.${interface_name}_dns_rule.dest_port='53'
		set firewall.${interface_name}_dns_rule.proto='tcpudp'
		set firewall.${interface_name}_dns_rule.target='ACCEPT'

		set firewall.${interface_name}_dhcp_rule=rule
		set firewall.${interface_name}_dhcp_rule.name="Allow DHCP request for $wifi_name"
		set firewall.${interface_name}_dhcp_rule.src="${interface_name}"
		set firewall.${interface_name}_dhcp_rule.src_port='67-68'
		set firewall.${interface_name}_dhcp_rule.dest_port='67-68'
		set firewall.${interface_name}_dhcp_rule.proto='udp'
		set firewall.${interface_name}_dhcp_rule.target='ACCEPT'

		set firewall.${interface_name}_hide_rule=rule
		set firewall.${interface_name}_hide_rule.enabled='1'
		set firewall.${interface_name}_hide_rule.name="Hide My LAN for $wifi_name"
		set firewall.${interface_name}_hide_rule.proto='all'
		set firewall.${interface_name}_hide_rule.src="${interface_name}"

		set firewall.${interface_name}_hide_rule.dest_ip="$lan_subnet"
		set firewall.${interface_name}_hide_rule.target='REJECT'

		commit firewall
	EOF
}

boot() {
	exit 0
}

start() {
	mkdir -p /var/lock
	lock /var/lock/guest-wifi.lock
	if [ $enabled = 0 ]; then
		if [ $create = 1 ]; then
			del_guest_wifi_cfg
			/etc/init.d/network restart
		else
			[ "$(uci -q get wireless.${interface_name}.disabled)" != "1" ] && {
				uci set wireless.${interface_name}.disabled='1'
				uci commit wireless
			}
		fi
	elif [ $enabled = 1 ]; then
		uci -q get network.lan.ipaddr >/dev/null || exit
		[ $create = 1 ] && {
			del_guest_wifi_cfg
			add_interface
			add_ssid
			mod_dhcp
			mod_fw
			/etc/init.d/network restart
		}
		[ "$(uci -q get wireless.${interface_name}.disabled)" = "1" ] && {
			uci del wireless.${interface_name}.disabled
			uci commit wireless
		}
	fi
	wifi reload
	lock -u /var/lock/guest-wifi.lock
}

stop() {
	exit 0
}

restart() {
	start
}
