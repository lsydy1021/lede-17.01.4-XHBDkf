name: Build LEDE ghl-r-001

on:
  push:
    branches: [master]

env:
  TARGET_DEVICE: ghl-r-001
  TOTAL_KEEP_NUMBER: 20

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo swapoff -a
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler zip
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean

          LEDE_VERSION="$(cat version)"
          echo "LEDE_VERSION=${LEDE_VERSION}" >>$GITHUB_ENV
          LEDE_OUTPUT_NAME="lede-${LEDE_VERSION}-${TARGET_DEVICE}"
          echo "LEDE_OUTPUT_NAME=${LEDE_OUTPUT_NAME}" >>$GITHUB_ENV

      - name: Load custom configuration
        run: |
          ./clean_all.sh
          cp -f "conf/.config.$TARGET_DEVICE" .config        
          make defconfig V=s

      - name: Download package
        id: package
        run: |
          make download -j8 || make download -j1 V=s
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        id: compile
        run: |
          echo -e "$(($(nproc) + 1)) thread compile"
          make -j$(($(nproc) + 1)) || make -j1 V=s
          mkdir -p out
          rm -rf out/*
          cp -u -f bin/targets/*/*/${LEDE_OUTPUT_NAME}-*-sysupgrade.bin out/
          zip -j "${LEDE_OUTPUT_NAME}.zip" out/*.bin
          echo "::set-output name=status::success"

      - name: Upload firmware directory
        uses: actions/upload-artifact@master
        if: steps.compile.outputs.status == 'success'
        with:
          name: ${{ env.LEDE_OUTPUT_NAME }}
          path: out

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.LEDE_OUTPUT_NAME }}
          release_name: ${{ env.LEDE_OUTPUT_NAME }}
          draft: false
          prerelease: false

      - name: Upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        if: steps.compile.outputs.status == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.LEDE_OUTPUT_NAME }}.zip
          asset_name: ${{ env.LEDE_OUTPUT_NAME }}.zip
          asset_content_type: application/zip

      - name: Remove old releases
        uses: HiGarfield/delete-older-releases@v0.1.0
        with:
          keep_latest: ${{ env.TOTAL_KEEP_NUMBER }}
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}